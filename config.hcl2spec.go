// Code generated by "mapstructure-to-hcl2 -type Config"; DO NOT EDIT.
package main

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	PackerBuildName            *string           `mapstructure:"packer_build_name" cty:"packer_build_name" hcl:"packer_build_name"`
	PackerBuilderType          *string           `mapstructure:"packer_builder_type" cty:"packer_builder_type" hcl:"packer_builder_type"`
	PackerDebug                *bool             `mapstructure:"packer_debug" cty:"packer_debug" hcl:"packer_debug"`
	PackerForce                *bool             `mapstructure:"packer_force" cty:"packer_force" hcl:"packer_force"`
	PackerOnError              *string           `mapstructure:"packer_on_error" cty:"packer_on_error" hcl:"packer_on_error"`
	PackerUserVars             map[string]string `mapstructure:"packer_user_variables" cty:"packer_user_variables" hcl:"packer_user_variables"`
	PackerSensitiveVars        []string          `mapstructure:"packer_sensitive_variables" cty:"packer_sensitive_variables" hcl:"packer_sensitive_variables"`
	VMName                     *string           `mapstructure:"vm_name" cty:"vm_name" hcl:"vm_name"`
	Folder                     *string           `mapstructure:"folder" cty:"folder" hcl:"folder"`
	Cluster                    *string           `mapstructure:"cluster" cty:"cluster" hcl:"cluster"`
	Host                       *string           `mapstructure:"host" cty:"host" hcl:"host"`
	ResourcePool               *string           `mapstructure:"resource_pool" cty:"resource_pool" hcl:"resource_pool"`
	Datastore                  *string           `mapstructure:"datastore" cty:"datastore" hcl:"datastore"`
	SetHostForDatastoreUploads *bool             `mapstructure:"set_host_for_datastore_uploads" cty:"set_host_for_datastore_uploads" hcl:"set_host_for_datastore_uploads"`
	VCenterServer              *string           `mapstructure:"vcenter_server" cty:"vcenter_server" hcl:"vcenter_server"`
	Username                   *string           `mapstructure:"username" cty:"username" hcl:"username"`
	Password                   *string           `mapstructure:"password" cty:"password" hcl:"password"`
	InsecureConnection         *bool             `mapstructure:"insecure_connection" cty:"insecure_connection" hcl:"insecure_connection"`
	Datacenter                 *string           `mapstructure:"datacenter" cty:"datacenter" hcl:"datacenter"`
	Identifier                 *string           `mapstructure:"identifier" cty:"identifier" hcl:"identifier"`
	KeepReleases               *int              `mapstructure:"keep_releases" cty:"keep_releases" hcl:"keep_releases"`
	KeepDays                   *int              `mapstructure:"keep_days" cty:"keep_days" hcl:"keep_days"`
	ContentLibrary             *string           `mapstructure:"content_library" cty:"content_library" hcl:"content_library"`
	DryRun                     *bool             `mapstructure:"dry_run" cty:"dry_run" hcl:"dry_run"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatConfig)
}

// HCL2Spec returns the hcl spec of a Config.
// This spec is used by HCL to read the fields of Config.
// The decoded values from this spec will then be applied to a FlatConfig.
func (*FlatConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"packer_build_name":              &hcldec.AttrSpec{Name: "packer_build_name", Type: cty.String, Required: false},
		"packer_builder_type":            &hcldec.AttrSpec{Name: "packer_builder_type", Type: cty.String, Required: false},
		"packer_debug":                   &hcldec.AttrSpec{Name: "packer_debug", Type: cty.Bool, Required: false},
		"packer_force":                   &hcldec.AttrSpec{Name: "packer_force", Type: cty.Bool, Required: false},
		"packer_on_error":                &hcldec.AttrSpec{Name: "packer_on_error", Type: cty.String, Required: false},
		"packer_user_variables":          &hcldec.AttrSpec{Name: "packer_user_variables", Type: cty.Map(cty.String), Required: false},
		"packer_sensitive_variables":     &hcldec.AttrSpec{Name: "packer_sensitive_variables", Type: cty.List(cty.String), Required: false},
		"vm_name":                        &hcldec.AttrSpec{Name: "vm_name", Type: cty.String, Required: false},
		"folder":                         &hcldec.AttrSpec{Name: "folder", Type: cty.String, Required: false},
		"cluster":                        &hcldec.AttrSpec{Name: "cluster", Type: cty.String, Required: false},
		"host":                           &hcldec.AttrSpec{Name: "host", Type: cty.String, Required: false},
		"resource_pool":                  &hcldec.AttrSpec{Name: "resource_pool", Type: cty.String, Required: false},
		"datastore":                      &hcldec.AttrSpec{Name: "datastore", Type: cty.String, Required: false},
		"set_host_for_datastore_uploads": &hcldec.AttrSpec{Name: "set_host_for_datastore_uploads", Type: cty.Bool, Required: false},
		"vcenter_server":                 &hcldec.AttrSpec{Name: "vcenter_server", Type: cty.String, Required: false},
		"username":                       &hcldec.AttrSpec{Name: "username", Type: cty.String, Required: false},
		"password":                       &hcldec.AttrSpec{Name: "password", Type: cty.String, Required: false},
		"insecure_connection":            &hcldec.AttrSpec{Name: "insecure_connection", Type: cty.Bool, Required: false},
		"datacenter":                     &hcldec.AttrSpec{Name: "datacenter", Type: cty.String, Required: false},
		"identifier":                     &hcldec.AttrSpec{Name: "identifier", Type: cty.String, Required: false},
		"keep_releases":                  &hcldec.AttrSpec{Name: "keep_releases", Type: cty.Number, Required: false},
		"keep_days":                      &hcldec.AttrSpec{Name: "keep_days", Type: cty.Number, Required: false},
		"content_library":                &hcldec.AttrSpec{Name: "content_library", Type: cty.String, Required: false},
		"dry_run":                        &hcldec.AttrSpec{Name: "dry_run", Type: cty.Bool, Required: false},
	}
	return s
}
